layout(rgba8, binding = 0) uniform image2D img_output;

#define STEPS 0.1

vec2 curve_line(vec2 a, vec2 b, float t) {
	return mix(a, b, t);
}

int float2int_rd(float x) {
	// return int(round(x - 0.5)) & ~1;
	// return int(floor(x)) & 0xFFFFFFFE;
	return int(floor(x));
}

void main() {
	int index = int(gl_GlobalInvocationID.x);
	Curve curve = curves.data[index];

	// t0-t1
	for (float t = 0; t < 1; t += STEPS) {
		float t0 = t;
		float t1 = t + STEPS;

		// run through points
		vec2 v0 = vec2(-1, -1);
		vec2 v1 = vec2(-1, -1);
		vec2 cut1 = vec2(-1, -1);
		int yx = 0xFFFEFFFE;

		switch (curve.count) {
			case C_LINE: {
				v0 = vec2(
					mix(curve.p0.x, curve.p1.x, t0),
					mix(curve.p0.y, curve.p1.y, t0)
				);
				v1 = vec2(
					mix(curve.p0.x, curve.p1.x, t1),
					mix(curve.p0.y, curve.p1.y, t1)
				);
				cut1 = v1;
				break;
			}
			// case C_QUADRATIC: quadratic_setup(curve.p0, curve.p1, curve.p2); break; 
			// case C_CUBIC: cubic_setup(curve); break; 
		}

		// TODO ?
		v1 = cut1;

		int raw_frag_x = float2int_rd((v0.x + v1.x) * 0.5);
		int raw_frag_y = float2int_rd((v0.y + v1.y) * 0.5);

		// positions clipped?
		int x = clamp(raw_frag_x, -1, int((indices.window_width & 0xFFFFFFFE) + 1));
		int y = clamp(raw_frag_y, -1, int((indices.window_height & 0xFFFFFFFE) + 1));

		// winding nuber
		int wn_y = y + 1;
		
		int winding_number = 0;
		if (v0.y == v1.y) {
			winding_number = 0;
		}	else {
			if (v0.y <= wn_y && wn_y < v1.y) {
				winding_number = -1;
			} else if (v1.y <= wn_y && wn_y < v0.y) {
				winding_number = 1;
			}
		}

		int fragment_index = atomicAdd(indices.fragments, 1);

		// output
		Fragment frag;
		frag.x = x;
		frag.y = y;
		frag.index = fragment_index;
		frag.path_index = curve.path_index;
		frag.winding_number = winding_number;
		frag.fragment_next = -1;
		fragments.data[fragment_index] = frag;
	}
}